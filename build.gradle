/*
 * Copyright (c) 2016, nwillc@gmail.com
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.jfrog.bintray' version "1.7.3"
    id 'jacoco'
    id 'pmd'
    id 'com.github.nwillc.vplugin' version "1.3.4"
    id 'info.solidsoft.pitest' version '1.1.4'
    id "org.ajoberstar.github-pages" version "1.6.0"
    id "org.sonarqube" version "2.2.1"

}

repositories {
    mavenLocal()
    jcenter {
        url 'http://jcenter.bintray.com'
    }
}

dependencies {
    compile 'com.github.nwillc:almost-functional:1.9.7'
    testCompile 'junit:junit:4.12',
            'org.assertj:assertj-core:3.6.1',
            'com.h2database:h2:1.4.193',
            'com.github.nwillc:jdk_contract_tests:1.8.2',
            'org.mockito:mockito-core:2.2.9',
            'org.apache.commons:commons-dbcp2:2.1.1'
}

group = 'com.github.nwillc'
archivesBaseName = 'fun-jdbc'
version = '0.8.9'
targetCompatibility = '1.8'
sourceCompatibility = '1.8'

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

test {
    beforeTest { descriptor ->
        logger.lifecycle("\tRunning " + descriptor.className + "." + descriptor.name)
    }

    afterSuite { descriptor, result ->
        if (descriptor.parent == null) {
            logger.lifecycle("\tTests run: " + result.testCount
                    + ", Failures: " + result.failedTestCount
                    + ", Skipped: " + result.skippedTestCount)
        }
    }

    testLogging {
        showStandardStreams true
        exceptionFormat "full"
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    dryRun = false
    publish = true
    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        name = project.name
        desc = 'Java 8 functional JDBC utility code, applying some of Java\'s newer features to reduce JDBC boilerplate code.'
        websiteUrl = 'https://github.com/nwillc/fun-jdbc'
        issueTrackerUrl = 'https://github.com/nwillc/fun-jdbc/issues'
        vcsUrl = 'https://github.com/nwillc/fun-jdbc.git'
        licenses = ['ISC']
        labels = ['jdk8', 'jdbc']
        publicDownloadNumbers = true
    }
}

bintrayUpload.onlyIf { !project.version.toString().endsWith('SNAPSHOT') }

pitest {
    threads = 4
    outputFormats = ['XML', 'HTML']
}

githubPages {
    pages {
        from javadoc
        into "javadoc"
    }
}
